EXCEPCIONES:
TRY{}
catch(excepcion a utilizar y nombre(e))
{}
-pueden haber varios catch.
-si hay un catch generico tiene que ser el ultimo.
para que capture todas las exceptciones menos la que quieres:
catch(Exception e) when (e.GetType()!=typeof(FormatException)) y ya en la otra especificas lo que quieres:
catch(FormatException e){"Esta mal";}
HERENCIA:
De más a menos rango:
class Object
class NombreClasePadre{}
class OtraClase:NombreClasePadre{}
para constructores k heredan de otros se usa :base()
Si creas un constructor distinto del constructor vacío da error en las clases hijo y 
debes crear en cada una un constructor public Hijo(string Name):base(Name){} y dentro de base() tienes k poner
un valor del mismo tipo k el de la clase padre.
Principio de sustitución;
No se puede hacer Caballo animal = new Mamifero;
Se puede hacer Mamiferos horse= new Caballo; 
Tmb se puede hacer Mamiferos animal = new Mamiferos()
Puedes acceder a los metodos de mamiferos pero no de Caballo
Puedes guardar en la variable animal k es la padre la hija horse : animal= horse
protected es accesible desde la clase k lo creas y las que heredan de ella.
Con new delante del todo escrito en la funcion hija se oculta la funcion de la clase padre
Con public virtual en una funcion de la clase padre conseguimos que en las clases hijo con un public override en una funcion con el mismo nombre se pueda modificar en esta funcion con lo que quieras.
Casi siempre se ponen las variable private y metodos en public pero no siempre es así
private solo es accesible desde su misma clase
protected es accesible desde su misma clase y las que heredan de esta misma
LISTAS:
COLAS:
Te incorporas al final de la cola y avanzas hasta llegar a la cabeza de la cola.
Se unen desde el inicio al final con punteros que apuntan al siguiente.

